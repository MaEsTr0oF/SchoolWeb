import styles from "./CoursesContent.module.css";
import Link from "next/link";
import { useState, useEffect } from "react";
import ContactForm from "../ContactForm/ContactForm";

const topCoursesData = [
  {
    id: 1,
    title: "Python",
    duration: "9 –º–µ—Å—è—Ü–µ–≤",
    salary: "–ó–ü –æ—Ç 150 —Ç—ã—Å.",
    image: "/images/courses/python.png",
    profession: "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è",
    sales: "",
    cost: "paid",
    durationMonths: 9,
    hasEmployment: true,
  },
  {
    id: 2,
    title: "Roblox",
    duration: "6 –º–µ—Å—è—Ü–µ–≤",
    salary: "–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä",
    image: "/images/courses/roblox.png",
    profession: "–ö—É—Ä—Å",
    sales: "",
    cost: "paid",
    durationMonths: 6,
    hasEmployment: false,
  },
  {
    id: 3,
    title: "Scratch",
    duration: "4 –º–µ—Å—è—Ü–∞",
    salary: "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
    image: "/images/courses/scratch.png",
    profession: "–ö—É—Ä—Å",
    sales: "",
    cost: "free",
    durationMonths: 4,
    hasEmployment: false,
  },
  {
    id: 4,
    title: "Minecraft",
    duration: "5 –º–µ—Å—è—Ü–µ–≤",
    salary: "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∏–≥—Ä–µ",
    image: "/images/courses/minecraft.png",
    profession: "–ö—É—Ä—Å",
    sales: "",
    cost: "free",
    durationMonths: 5,
    hasEmployment: false,
  },
];

export default function CoursesContent() {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedFilters, setSelectedFilters] = useState({
    cost: {
      free: false,
      paid: true,
    },
    duration: {
      upTo1Month: false,
      from1To3Months: false,
      from3To6Months: false,
      from6To12Months: true,
      over12Months: false,
    },
    employment: {
      withEmployment: false,
      withoutEmployment: false,
    },
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [filterState, setFilterState] = useState({
    cost: {
      anySelected: true,
      allSelected: false,
    },
    duration: {
      anySelected: true,
      allSelected: false,
    },
    employment: {
      anySelected: false,
      allSelected: false,
    },
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –≤–µ—Ä—Ö–Ω–µ–º –º–µ–Ω—é
  const [activeFilterButtons, setActiveFilterButtons] = useState<string[]>([]);

  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ –º–µ–Ω—é
  const filterCategories = [
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–î–∏–∑–∞–π–Ω",
    "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
    "–ù–∞—á–∏–Ω–∞—é—â–∏–º",
    "–î–ª—è –¥–µ—Ç–µ–π",
    "–°–∫–∏–¥–∫–∏",
  ];

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –≤—Å–µ –∏–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    setFilterState({
      cost: {
        anySelected: Object.values(selectedFilters.cost).some((v) => v),
        allSelected: Object.values(selectedFilters.cost).every((v) => v),
      },
      duration: {
        anySelected: Object.values(selectedFilters.duration).some((v) => v),
        allSelected: Object.values(selectedFilters.duration).every((v) => v),
      },
      employment: {
        anySelected: Object.values(selectedFilters.employment).some((v) => v),
        allSelected: Object.values(selectedFilters.employment).every((v) => v),
      },
    });
  }, [selectedFilters]);

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  };

  const handleFilterChange = (category: string, filter: string) => {
    setSelectedFilters((prev) => ({
      ...prev,
      [category]: {
        ...prev[category as keyof typeof prev],
        [filter]:
          !prev[category as keyof typeof prev][
            filter as keyof (typeof prev)[keyof typeof prev]
          ],
      },
    }));
  };

  const handleFilterButtonClick = (filterName: string) => {
    setActiveFilterButtons((prev) => {
      if (prev.includes(filterName)) {
        return prev.filter((item) => item !== filterName);
      } else {
        return [...prev, filterName];
      }
    });
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤
  const filteredCourses = topCoursesData.filter((course) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (
      !filterState.cost.anySelected ||
      !filterState.duration.anySelected ||
      (!filterState.employment.anySelected &&
        Object.values(selectedFilters.employment).some((v) => v === true))
    ) {
      return false;
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
    if (
      searchTerm &&
      !course.title.toLowerCase().includes(searchTerm.toLowerCase())
    ) {
      return false;
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω–µ –≤—Å–µ –≤—ã–±—Ä–∞–Ω—ã)
    if (!filterState.cost.allSelected) {
      if (
        (selectedFilters.cost.paid && course.cost !== "paid") ||
        (selectedFilters.cost.free && course.cost !== "free")
      ) {
        return false;
      }
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω–µ –≤—Å–µ –≤—ã–±—Ä–∞–Ω—ã)
    if (!filterState.duration.allSelected) {
      const durationMonths = course.durationMonths;

      const matchesDuration =
        (selectedFilters.duration.upTo1Month && durationMonths <= 1) ||
        (selectedFilters.duration.from1To3Months &&
          durationMonths > 1 &&
          durationMonths <= 3) ||
        (selectedFilters.duration.from3To6Months &&
          durationMonths > 3 &&
          durationMonths <= 6) ||
        (selectedFilters.duration.from6To12Months &&
          durationMonths > 6 &&
          durationMonths <= 12) ||
        (selectedFilters.duration.over12Months && durationMonths > 12);

      if (!matchesDuration) {
        return false;
      }
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É (–µ—Å–ª–∏ –Ω–µ –≤—Å–µ –≤—ã–±—Ä–∞–Ω—ã –∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ)
    if (
      !filterState.employment.allSelected &&
      filterState.employment.anySelected
    ) {
      const hasEmployment = course.hasEmployment;

      if (
        (selectedFilters.employment.withEmployment && !hasEmployment) ||
        (selectedFilters.employment.withoutEmployment && hasEmployment)
      ) {
        return false;
      }
    }

    return true;
  });

  return (
    <>
      <main className={styles.coursesPage}>
        <div className={styles.container}>
          <h1 className={styles.pageTitle}>–í—Å–µ –∫—É—Ä—Å—ã</h1>

          {/* –ü–æ–∏—Å–∫ */}
          <div className={styles.searchContainer}>
            <input
              type="text"
              placeholder="–ö–∞–∫–æ–π –∫—É—Ä—Å –≤–∞–º –Ω—É–∂–µ–Ω?"
              className={styles.searchInput}
              value={searchTerm}
              onChange={handleSearchChange}
            />
            <button className={styles.searchButton}>
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M11 19C15.4183 19 19 15.4183 19 11C19 6.58172 15.4183 3 11 3C6.58172 3 3 6.58172 3 11C3 15.4183 6.58172 19 11 19Z"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
                <path
                  d="M21 21L16.65 16.65"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
              </svg>
            </button>
          </div>

          <div className={styles.filtersContainer}>
            <div className={styles.filterGroup}>
              {filterCategories.map((filter, index) => (
                <button
                  key={index}
                  className={`${styles.filterButton} ${
                    activeFilterButtons.includes(filter) ? styles.active : ""
                  }`}
                  onClick={() => handleFilterButtonClick(filter)}
                >
                  {filter}
                </button>
              ))}
            </div>
          </div>

          <div className={styles.contentWrapper}>
            <div className={styles.coursesGrid}>
              {filteredCourses.length > 0 ? (
                filteredCourses.map((course) => (
                  <Link
                    key={course.id}
                    href={`/courses/${course.id}`}
                    className={styles.courseCard}
                  >
                    <span className={styles.courseProfession}>
                      {course.profession}
                    </span>
                    <div className={styles.courseImage}>
                      <div className={styles.courseEmoji}>
                        {course.id === 1 && "üêç"}
                        {course.id === 2 && "üéÆ"}
                        {course.id === 3 && "üé®"}
                        {course.id === 4 && "‚õèÔ∏è"}
                      </div>
                    </div>
                    <div className={styles.courseInfo}>
                      <h3 className={styles.courseTitle}>{course.title}</h3>
                      <div className={styles.courseDetails}>
                        <span>{course.duration}</span>
                        <span>‚Ä¢</span>
                        <span>{course.salary}</span>
                      </div>
                    </div>
                  </Link>
                ))
              ) : (
                <div className={styles.noCoursesMessage}>
                  <p>–ù–µ—Ç –∫—É—Ä—Å–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º</p>
                  <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</p>
                </div>
              )}
            </div>

            <div className={styles.sidebar}>
              <div className={styles.filterSection}>
                <h3 className={styles.filterTitle}>–°—Ç–æ–∏–º–æ—Å—Ç—å</h3>
                <div className={styles.filterOption}>
                  <input
                    type="checkbox"
                    id="free"
                    checked={selectedFilters.cost.free}
                    onChange={() => handleFilterChange("cost", "free")}
                  />
                  <label htmlFor="free">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ (36)</label>
                </div>
                <div className={styles.filterOption}>
                  <input
                    type="checkbox"
                    id="paid"
                    checked={selectedFilters.cost.paid}
                    onChange={() => handleFilterChange("cost", "paid")}
                  />
                  <label htmlFor="paid">–ü–ª–∞—Ç–Ω–æ–µ (258)</label>
                </div>
              </div>

              <div className={styles.filterSection}>
                <h3 className={styles.filterTitle}>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h3>
                <div className={styles.filterOption}>
                  <input
                    type="checkbox"
                    id="upTo1Month"
                    checked={selectedFilters.duration.upTo1Month}
                    onChange={() =>
                      handleFilterChange("duration", "upTo1Month")
                    }
                  />
                  <label htmlFor="upTo1Month">–î–æ 1 –º–µ—Å—è—Ü–∞ (12)</label>
                </div>
                <div className={styles.filterOption}>
                  <input
                    type="checkbox"
                    id="from1To3Months"
                    checked={selectedFilters.duration.from1To3Months}
                    onChange={() =>
                      handleFilterChange("duration", "from1To3Months")
                    }
                  />
                  <label htmlFor="from1To3Months">1-3 –º–µ—Å—è—Ü–∞ (23)</label>
                </div>
                <div className={styles.filterOption}>
                  <input
                    type="checkbox"
                    id="from3To6Months"
                    checked={selectedFilters.duration.from3To6Months}
                    onChange={() =>
                      handleFilterChange("duration", "from3To6Months")
                    }
                  />
                  <label htmlFor="from3To6Months">3-6 –º–µ—Å—è—Ü–µ–≤ (46)</label>
                </div>
                <div className={styles.filterOption}>
                  <input
                    type="checkbox"
                    id="from6To12Months"
                    checked={selectedFilters.duration.from6To12Months}
                    onChange={() =>
                      handleFilterChange("duration", "from6To12Months")
                    }
                  />
                  <label htmlFor="from6To12Months">6-12 –º–µ—Å—è—Ü–µ–≤ (87)</label>
                </div>
                <div className={styles.filterOption}>
                  <input
                    type="checkbox"
                    id="over12Months"
                    checked={selectedFilters.duration.over12Months}
                    onChange={() =>
                      handleFilterChange("duration", "over12Months")
                    }
                  />
                  <label htmlFor="over12Months">–ë–æ–ª–µ–µ 12 –º–µ—Å—è—Ü–µ–≤ (132)</label>
                </div>
              </div>

              <div className={styles.filterSection}>
                <h3 className={styles.filterTitle}>–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</h3>
                <div className={styles.filterOption}>
                  <input
                    type="checkbox"
                    id="withEmployment"
                    checked={selectedFilters.employment.withEmployment}
                    onChange={() =>
                      handleFilterChange("employment", "withEmployment")
                    }
                  />
                  <label htmlFor="withEmployment">
                    –° —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º (212)
                  </label>
                </div>
                <div className={styles.filterOption}>
                  <input
                    type="checkbox"
                    id="withoutEmployment"
                    checked={selectedFilters.employment.withoutEmployment}
                    onChange={() =>
                      handleFilterChange("employment", "withoutEmployment")
                    }
                  />
                  <label htmlFor="withoutEmployment">
                    –ë–µ–∑ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (45)
                  </label>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
      <div className={styles.contactFormContainer}>
        <ContactForm />
      </div>
    </>
  );
}
